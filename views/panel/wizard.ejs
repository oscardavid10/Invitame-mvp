<section class="container mx-auto px-5 py-10 grid gap-6">
  <% 
    const theme = (()=>{ try { return JSON.parse(inv.theme_json||'{}') } catch { return {} } })();
    const sections = ['hero','detalles','mensaje','galeria','ubicacion'];
    if (plan?.allow_registry && (theme.meta?.registry || '').trim()) sections.push('registry');
    if (plan?.allow_music && (theme.meta?.music_url || '').trim()) sections.push('music');
    sections.push('rsvp','footer');
  %>
  <div class="card">
    <h3 class="text-lg font-bold mb-3">1) Plantilla</h3>
    <div class="flex gap-2 mb-3">
      <% cats.forEach(c=>{ %>
        <a href="#cat-<%= c %>" class="btn btn-ghost"><%= c %></a>
      <% }) %>
    </div>
    <% cats.forEach(c=>{ %>
      <div id="cat-<%= c %>" class="grid md:grid-cols-4 gap-3 mb-4">
        <% templates.filter(t=>t.category===c).forEach(t=>{ %>
          <label class="block border border-white/10 rounded-xl p-2">
            <input type="radio" name="template_key" form="form-tpl" value="<%= t.key_name %>" <%= inv.template_key===t.key_name?'checked':'' %> />
            <div class="text-sm font-semibold mt-1"><%= t.name %></div>
            <img class="rounded-lg mt-2" src="<%= t.preview_img %>" alt="">
          </label>
        <% }) %>
      </div>
    <% }) %>
    <form id="form-tpl" method="post" action="/panel/wizard/template" class="auto-save">
      <input type="hidden" name="invitation_id" value="<%= inv.id %>">
    </form>
  </div>


  <div class="card">
    <h3 class="text-lg font-bold mb-3">2) URL (slug)</h3>
     <form method="post" action="/panel/wizard/slug" class="flex gap-2 items-center auto-save">
      <input type="hidden" name="invitation_id" value="<%= inv.id %>"/>
      <span>/u/</span>
      <input class="px-3 py-2 rounded bg-black/30" name="slug" value="<%= inv.slug %>" <%= inv.slug_locked?'disabled':'' %> required />
      <% if (inv.slug_locked){ %><span class="text-sm text-red-300 ml-2">Bloqueado</span><% } %>
    </form>
  </div>

  <div class="card">
    <h3 class="text-lg font-bold mb-3">3) Fecha del evento</h3>
     <form method="post" action="/panel/wizard/date" class="flex gap-2 items-center auto-save">
      <input type="hidden" name="invitation_id" value="<%= inv.id %>"/>
      <input class="px-3 py-2 rounded bg-black/30" name="date_iso" type="datetime-local" value="<%= inv.date_iso.substring(0,16) %>" <%= inv.date_locked?'disabled':'' %> required />
      <% if (inv.date_locked){ %><span class="text-sm text-red-300 ml-2">Fecha bloqueada</span><% } %>
    </form>
  </div>

  <div class="card">
<h3 class="text-lg font-bold mb-3">4) Detalles del evento</h3>
      <form method="post" action="/panel/wizard/details" class="grid md:grid-cols-2 gap-4 auto-save">
      <input type="hidden" name="invitation_id" value="<%= inv.id %>">
      <div>
        <label class="block mb-1">Recepción - Lugar</label>
        <input class="px-3 py-2 rounded bg-black/30 w-full" name="venue" value="<%= inv.venue %>">
        <label class="block mt-4 mb-1">Dirección</label>
        <input class="px-3 py-2 rounded bg-black/30 w-full" name="address" value="<%= inv.address %>">
        <label class="flex items-center gap-2 mt-2">
          <input type="checkbox" name="show_map" <%= (theme.meta?.show_map ?? inv.show_map) ? 'checked' : '' %> /> Mostrar mapa
        </label>
      </div>
      <div>
        <label class="block mb-1">Ceremonia - Lugar</label>
        <input class="px-3 py-2 rounded bg-black/30 w-full" name="ceremony_venue" value="<%= inv.ceremony_venue || '' %>">
        <label class="block mt-4 mb-1">Dirección</label>
        <input class="px-3 py-2 rounded bg-black/30 w-full" name="ceremony_address" value="<%= inv.ceremony_address || '' %>">
        <label class="flex items-center gap-2 mt-2">
          <input type="checkbox" name="show_ceremony_map" <%= (theme.meta?.show_ceremony_map ?? inv.show_ceremony_map) ? 'checked' : '' %> /> Mostrar mapa
        </label>
      </div>
      <% if (plan?.allow_registry) { %>
      <div class="md:col-span-2">
        <label class="block mb-1 mt-4">Mesa de regalos</label>
        <textarea class="rounded bg-black/30 px-3 py-2 w-full" rows="3" name="registry"><%= theme.meta?.registry || '' %></textarea>
        <p class="text-xs text-[var(--ring)] mt-2">Pega enlaces (uno por línea) o instrucciones.</p>
      </div>
      <% } %>
    </form>
  </div>

  <div class="card">
    <h3 class="text-lg font-bold mb-3">5) Orden de secciones</h3>
    <p class="text-sm text-[var(--ring)] mb-3">Arrastra para reordenar.</p>
    <ul id="sec-list" class="grid md:grid-cols-3 gap-2">
       <% (JSON.parse(inv.section_order || JSON.stringify(sections))).forEach(s=>{ %>
        <li class="drag-item card cursor-move" data-key="<%= s %>"><%= s %></li>
      <% }) %>
    </ul>
    <form method="post" action="/panel/wizard/sections" class="mt-3 auto-save">
      <input type="hidden" name="invitation_id" value="<%= inv.id %>">
      <input type="hidden" name="order" id="order">
    </form>
  </div>
<div class="card">
    <h3 class="text-lg font-bold mb-3">6) Animaciones de secciones</h3>
    <%
      const animIn = ['','fadeIn','fadeInUp','fadeInDown','fadeInLeft','fadeInRight','zoomIn'];
      const animOut = ['','fadeOut','fadeOutUp','fadeOutDown','fadeOutLeft','fadeOutRight','zoomOut'];
    %>
   <form id="form-anim" method="post" action="/panel/wizard/theme" class="grid md:grid-cols-2 gap-4 auto-save">
      <input type="hidden" name="invitation_id" value="<%= inv.id %>">
      <input type="hidden" name="theme_json" id="theme_json" />
      <% sections.forEach(sec=>{ const cur = theme.animations?.[sec] || {}; %>
        <div>
          <div class="font-semibold mb-1 capitalize"><%= sec %></div>
          <div class="grid grid-cols-2 gap-2">
            <select class="px-3 py-2 rounded bg-black/30 w-full" data-sec="<%= sec %>" data-type="in">
              <% animIn.forEach(opt=>{ %>
                <option value="<%= opt %>" <%= cur.in===opt ? 'selected' : '' %>><%= opt || 'Sin entrada' %></option>
              <% }) %>
            </select>
            <select class="px-3 py-2 rounded bg-black/30 w-full" data-sec="<%= sec %>" data-type="out">
              <% animOut.forEach(opt=>{ %>
                <option value="<%= opt %>" <%= cur.out===opt ? 'selected' : '' %>><%= opt || 'Sin salida' %></option>
              <% }) %>
            </select>
          </div>
        </div>
      <% }) %>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
  <script>
    const debounce = (fn, delay = 600) => {
      let t; return (...args)=>{ clearTimeout(t); t = setTimeout(()=>fn(...args), delay); };
    };

    const chip = document.createElement('div');
    chip.className = 'fixed top-16 right-5 bg-black/80 text-white text-sm px-3 py-1 rounded-full hidden';
    document.body.appendChild(chip);
    function setStatus(text, cls){
      chip.textContent = text;
      chip.className = 'fixed top-16 right-5 text-sm px-3 py-1 rounded-full ' + cls;
      chip.classList.remove('hidden');
      if(text==='Guardado') setTimeout(()=>chip.classList.add('hidden'),2000);
    }

    function autoSave(form, prepare){
      const send = debounce(()=>{
        prepare?.();
        setStatus('Guardando...','bg-yellow-500 text-black');
        fetch(form.action, {method:'POST', body:new FormData(form), headers:{'Accept':'application/json'}})
          .then(r=>{ if(r.ok) setStatus('Guardado','bg-green-600'); else throw new Error(); })
          .catch(()=>setStatus('Error · Reintentar','bg-red-600'));
      },600);
      form.querySelectorAll('input,textarea,select').forEach(el=>{
        el.addEventListener('input', send);
        el.addEventListener('change', send);
      });
      form.addEventListener('submit', e=>e.preventDefault());
      return send;
    }

    const list = document.getElementById('sec-list');
    document.querySelectorAll('form.auto-save').forEach(form=>{
      if(form.getAttribute('action') === '/panel/wizard/sections'){
        const send = autoSave(form, ()=>{
          const order = [...list.querySelectorAll('.drag-item')].map(li=>li.dataset.key);
          document.getElementById('order').value = order.join(',');
        });
        new Sortable(list, { animation:150, onSort: send });
      } else if(form.id === 'form-anim'){
        autoSave(form, ()=>{
          const anims = {};
          form.querySelectorAll('select').forEach(sel=>{
            const sec = sel.dataset.sec;
            const type = sel.dataset.type;
            const val = sel.value;
            if(!anims[sec]) anims[sec] = {};
            if(val) anims[sec][type] = val;
          });
          document.getElementById('theme_json').value = JSON.stringify({ animations: anims });
        });
      } else {
        autoSave(form);
      }
    });
  </script>
</section>